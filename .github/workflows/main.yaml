name: CI
on:
  push: 
      branches: [ 'main' ]
  workflow_dispatch:
jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    strategy: 
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./back/Dockerfile
            context: ./back
            image: andytakker/tth_back
          - dockerfile: ./front/Dockerfile
            context: ./front
            image: andytakker/tth_front
          - dockerfile: ./nginx/Dockerfile
            context: ./nginx
            image: andytakker/tth_nginx
    permissions:
        contents: read
        packages: write
    
    steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v2

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2
        
        - name: Login to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@v4
          with:
            images: ${{ matrix.image }}
 
        - name: check
          run: ls . && pwd

        - name: Build and push Docker image stackoverfollowers
          uses: docker/build-push-action@v4
          with:
            file: ${{ matrix.dockerfile }}
            push: true
            context: ${{ matrix.context }}
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            build-args: |
              SERVER_HOST=${{ secrets.SERVER_HOST }}

  update-server:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download docker images
        env: 
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          eval `ssh-agent -k` > /dev/null
          eval `ssh-agent -s` > /dev/null
          echo "start agent"
          echo "$SSH_PRIVATE_KEY" > secret_key
          chmod 600 secret_key
          ssh-add secret_key
          scp -o StrictHostKeyChecking=no deploy.sh $SERVER_USER@$SERVER_HOST:~/
          SSH_CMD="ssh -T -A -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST"
          $SSH_CMD << EOF
            bash deploy.sh
          EOF



